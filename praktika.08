function mergesort!(a)
    if length(a)==1
        return a
    end
    a1 = mergesort!(a[begin:end÷2]) 
    a2 = mergesort!(a[end÷2+1:end])
    merge(a1, a2)
end

#Задача 1
function merge_sort(L, compare) 
    if len(L) < 2
        return L[:]
    else
        middle = int(len(L) / 2)
        left = merge_sort(L[:middle], compare)
        rigth = merge_sort(L[middle :], compare)
        return merge(left, right, compare)
    end
end
function merge!(left, right, compare)
    result = collect(1)
    u = 1
    i = 0
    j = 0
    while ((i < length(left)) & (j < length(right)))
        if compare(left[i], right[j])
            insert!(result, u, left[i])
            u += 1
            i += 1
        else
            insert!(result, u, right[j])
            u += 1
            j += 1
        end
    end
    while i < length(left)
        insert!(result, u, left[i])
        u += 1
        i += 1
    end
    while j < length(right)
        insert!(result, u, right[j])
        u += 1
        j += 1
    end
    return result
end
#Задача 2. 
function msort(x)
    result = collect(1)
    u = 1
    if length(x) < 2
        return x
    mid = int(length(x)/2)
    y = msort(x[:mid])
    z = msort(x[mid :])
    while (length(y) > 0) || (length(z) > 0)
        if length(y) > 0 & length(z) > 0
            if y[0] > z[0]
                insert!(result, u, z[0])
                u += 1
                delete!(z,1)
            else
                insert!(result, u, y[0])
                u += 1
                delete!(y,1)
            end
        elseif length(z) > 0
            for i in z
                insert!(result, u, i)
                u += 1
                delete!(z,1)
            end
        else
            for i in y
                insert!(result, u, i)
                u += 1
                delete!(y,1)
            end
        end
    end
    return result
end
#=Задача 3.
function quicsort!(a)
    if isempty(a)
        return a
    end
    a, i, j = partsort!(a,a[begin]) 
    #УТВ: all(a[begin:i] .< b) && all(a[i+1:j] .== b) && all(a[j+1:end] .>= b)
    quicsort!(@viev a[begin:i])
    quicsort!(@viev a[j+1:end])
    return a
end

#Задача 4. 
function partsort!(A)
    if length(A) <= 1
        return A
    else
        q = random.choice(A)
        L = [elem for elem in A if elem < q]
        M = [q] * A.count(q)
        R = [elem for elem in A if elem > q] 
        return partsort!(L) + M + partsort!(R)
    end
end
function partsort2!(A, l, r)
    if l >= r
        return 
    else
        q = random.choice(A[l:r + 1])
        i = l
        j = r
        while i <= j
            while A[i] < q
                i += 1
            end
            while A[j] > q
                j -= 1
            end
            if i <= j 
                A[i], A[j] = A[j], A[i]
                i += 1
                j -= 1 
                partsort2!(A, l, j)
                partsort2!(A, i, r)
            end
        end
    end
end
#Задача 5
function print_statistics(arr)
    mediana = None
    number = None
    if not len(arr)
        print("Пустой или не предоставлен")
    else
        number = len(arr)
        number1 = (number - 1) // 2
        if number % 2 == 0:
            mediana = (arr[number1] + arr[number1 + 1]) / 2
        else:
            mediana = arr[number1]
        end
    end
        print(f"Длина - {number}, Среднее - {sum(arr) / number}, "
              f"Минимальное значение - {min(arr)}, Максимальное значение - {max(arr)}, "
              f"Медиана - {mediana}")
end
