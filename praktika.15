#Задача 1. Написать функцию convert_to_nested(tree::ConnectList{T}, root::T) where T, получающую на вход дерево, представленное
#списком смежностей tree и индексом его корня root, и возвращающая представление того же дерева в виде вложенных векторов.

ConnectList{T}=Vector{Vector{T}}
function convert(tree::ConnectList{T}, root::T) where T
b=[]
for i in firstindex(tree):lastindex(tree)
for j in firstindex(tree[i]):lastindex(tree[i])
push!(b,vcat([[a] for a in tree[j+1]],tree[i][j]))
end
if length(tree[i])+2>length(tree) || lastindex(tree[length(tree[i])+2])==0
break
end
end
b=vcat(b,root)
return b
end

#Задача 2. Написать функцию convert_to_list(tree::NestedVectors), получающую на вход дерево, представленное вложенными векторами,
#и возвращающая кортеж из списка смежностей типа ConnectList этого дерева и индекса его корня.

function convert(tree)
T=typeof(tree[end])
connect_tree = Dict{T,Vector{T}}()

function recurs_trace(tree)
connect_tree[tree[end]]=[]
for subtree in tree[1:end-1]
push!(connect_tree[tree[end]], recurs_trace(subtree))
end
return tree[end]
end

recurs_trace(tree)
return connect_tree
end

#Задача 3. Написать функцию convert(tree::ConnectList{T}, root::T) where T, получающую на вход дерево, представленное списком смежностей tree и индексом его корня root, и возвращающая ссылку на связанные стркутруры типа Tree{T}, представляющие то же самое дерево, где

struct Tree{T}
index::T
sub::Vector{Tree{T}}}
Tree{T}(index) where T = new(index, Tree{T}[])
end

function tree_convert(tree::ConnectList{T}, root::T) where T
tr = copy(tree)
arr = Array{Tree{Int}}(undef,length(tr))
for i in 1:length(tr)
arr[i] = Tree{Int}(i,[])
end
list = arr[root]
a = [root]
while (!isempty(a))
cur = first(a)
deleteat!(a,firstindex(a))
a = append!(a,tr[cur])
for tree in tr[cur]
push!(list_arr[cur].sub,list_arr[tree])
end
end
return list
end

#Задача 4. Написать функцию convert(tree::Tree{T}) where T, получающую на вход ссылку на связанные структуры типа Tree{T},
#представляющие некоторое дерево, и возвращающая кортеж из списка смежностей типа ConnectList этого дерева и индекса его корня.

function convert(tree::Tree{T}) where T
res = []
root = 1
for i in 2:tree.index
push!(res,[])
root+=1
end
q = [tree]
while (!isempty(q))
cur = first(q)
q = append!(q,cur.sub)
deleteat!(q,firstindex(q))
for i in cur.sub
if (cur.index > length(res))
while (i.index != length(res))
push!(res,[])
end
end
push!(res[cur.index],i.index)
end
end
return res
end

#Задача 5. В лекции 7 были написаны следующие 5 функций:
#функция, возвращающая высоту заданного дерева
function height(tree::ConnectList{T}, root::T) where T
h=0
for i in tree[root]
h = max(h,height(tree,i))
end
return h+1
end
#функция, возвращаюшая число всех вершин заданного дерева
function vernumber(tree::ConnectList{T}) where T
return length(tree)
end
#функция, возвращающая число всех листьев заданного дерева
function leavesnumber(tree::ConnectList{T}, root::T) where T
if isempty(tree[root])
return 1
end
N=0
for i in tree[root]
N += leavesnumber(tree,i)
end
return N
end
#функция, возвращающая наибольшую валентность по выходу вершин заданного дерева
function maxvalence(tree::NestedVectors)
mx = 0
for i in 1:length(tree)
mx = max(mx,length(tree[i][1]))
end
return mx
end
#функция, возвращающая среднюю длину пути к вершинам заданного дерева
function sumpath_numver(tree::Tree)
N = 1
S = 1
for sub in tree.sub
s, n = sumpath_numver(sub)
S += s + 1
N += n
end
return S, N
end
#Во всех этих случаях дерево представлялось связанными структурами типа Tree{T}.
#Требуется дополнить эти определения функций новыми методами, в которых входной аргумент, через который каждая из функций
#получает данные, представляющие дерево, имел бы тип ConnectList, а также тип NestedVectors.

#Задача 6. Написать функцию, получающую на вход имя некоторого типа (встоенного или пользовательского) языка Julia
#(тип
 
этого аргумента - Type) и распечатывающая список всех дочерних типов в следующем формате:

function alltypes(type)
for i in subtypes(type)
println(i)
alltypes(i)
end
end

#Задача 7. Требуется переписать эту функцию, используя в качестве исходных данных, представляющих дерево, список смежностей типа
#ConnectList и индекс его корня.

function find_general(tree::Vector, setver::Set)
number_visited = 0
general = 0
function recurstrace(tree, parent=0)
is_mutable_general = false

for subtree in tree[begin:end-1]
if number_visited < length(setver)
recurstrace(subtree, tree[end])
end
end
if tree[end] in setver
number_visited +=1
if number_visited == 1
general = tree[end]
end
end
if general==tree[end]
is_mutable_general = true
end
if is_mutable_general && number_visited < length(setver)
general = parent
end
end
recurstrace(tree)
return general
end
